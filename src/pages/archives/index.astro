---
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import BlogPostListItem from "@/components/list-items/BlogPostListItem.astro";
import { getPostsByYear } from "@/content/blogPosts/queries";
import { groupPosts } from "@/content/blogPosts/utils";
import { SITE } from "@/config";

const postsByYear = await getPostsByYear();

const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];
---

<Layout title={`Archives | ${SITE.title}`}>
  <Header />
  <Main pageTitle="Archives" pageDesc="All the articles I've archived.">
    {
      Object.entries(postsByYear)
        .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
        .map(([year, yearGroup]) => {
          const postsByMonth = groupPosts(
            yearGroup,
            post => new Date(post.data.frontmatter.pubDatetime).getMonth() + 1
          );
          return (
            <div>
              <span class="text-2xl font-bold">{year}</span>
              <sup class="text-sm">{yearGroup.length}</sup>
              {Object.entries(postsByMonth)
                .sort(([monthA], [monthB]) => Number(monthB) - Number(monthA))
                .map(([month, monthGroup]) => (
                  <div class="flex flex-col sm:flex-row">
                    <div class="mt-6 min-w-36 text-lg sm:my-6">
                      <span class="font-bold">{months[Number(month) - 1]}</span>
                      <sup class="text-xs">{monthGroup.length}</sup>
                    </div>
                    <ul>
                      {monthGroup
                        .sort(
                          (a, b) =>
                            Math.floor(
                              new Date(
                                b.data.frontmatter.pubDatetime
                              ).getTime() / 1000
                            ) -
                            Math.floor(
                              new Date(
                                a.data.frontmatter.pubDatetime
                              ).getTime() / 1000
                            )
                        )
                        .map(data => (
                          <BlogPostListItem {...data} />
                        ))}
                    </ul>
                  </div>
                ))}
            </div>
          );
        })
    }
  </Main>
  <Footer />
</Layout>
